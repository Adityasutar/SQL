Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE 'A%'
OR CITY LIKE 'I%'
OR CITY LIKE 'E%'
OR CITY LIKE 'U%'
OR CITY LIKE 'O%'


OR 
SELECT * 
FROM STATION 
WHERE CITY REGEXP '^[AEIOU]';



Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE '%A'
       OR CITY LIKE '%E'
       OR CITY LIKE '%I'
       OR CITY LIKE '%O'
       OR CITY LIKE '%U';

OR 
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '[AEIOU]$';



Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SELECT CITY
FROM STATION 
WHERE CITY REGEXP '^[AEIOU].*[AEIOU]$';


Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY
FROM STATION
WHERE CITY NOT LIKE 'A%'
  AND CITY NOT LIKE 'E%'
  AND CITY NOT LIKE 'I%'
  AND CITY NOT LIKE 'O%'
  AND CITY NOT LIKE 'U%';



Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U') 
   AND RIGHT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U');


Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT NAME FROM STUDENTS WHERE MARKS > 75 
ORDER BY RIGHT(NAME,3), ID ASC;

OR 

SELECT NAME FROM STUDENTS WHERE MARKS > 75 
ORDER BY SUBSTR(NAME,-3), ID ;

Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT NAME
FROM EMPLOYEE
ORDER BY NAME ASC;

Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

SELECT NAME FROM EMPLOYEE WHERE SALARY > 2000 AND MONTHS < 10




Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

Explanation

Values in the tuple  form an Isosceles triangle, because .
Values in the tuple  form an Equilateral triangle, because . Values in the tuple  form a Scalene triangle, because .
Values in the tuple  cannot form a triangle because the combined value of sides  and  is not larger than that of side .

SELECT 
CASE
WHEN (A+B <=C) OR (B+C <=A) OR (C+A <= B)THEN 'Not A Triangle'
WHEN A = B AND  B = C  THEN 'Equilateral'
WHEN A = B  OR B = C  OR  C = A  THEN 'Isosceles'

ELSE  'Scalene'
END AS TRIANGLE_TYPE
FROM TRIANGLES;
